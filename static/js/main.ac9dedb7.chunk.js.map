{"version":3,"sources":["schemas.js","Register.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["contactsSchema","yup","shape","name","max","required","password","repeatPassword","email","website","url","age","min","skills","acceptTerms","Register","props","state","field","this","initialValues","validationSchema","onSubmit","values","setSubmitting","validate","errors","test","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Item","label","placeholder","onBlur","onChange","value","prefix","type","style","color","Password","arrayHelpers","length","map","skill","idx","Fragment","key","uniqueId","className","onClick","remove","push","width","checked","href","htmlType","block","disabled","React","Component","Content","Layout","App","justify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac9dedb7.chunk.js","sourcesContent":["import * as yup from 'yup';\n\nconst contactsSchema = yup.object().shape({\n  name: yup\n    .string()\n    .max(50, 'Too long Name')\n    .required('Name is required field.'),\n  password: yup.string().required('Password is required field.'),\n  repeatPassword: yup.string().required('You dont repeat password.'),\n  email: yup\n    .string()\n    .email('Invalid email address.')\n    .required('Email is required field.'),\n  website: yup.string().url(),\n  age: yup\n    .number()\n    .min(18, '18 is min age')\n    .max(65, '65 is the max age')\n    .required('Age is required field.'),\n  skills: yup.array(),\n  acceptTerms: yup.bool(),\n});\n\nexport default contactsSchema;\n","import React from 'react';\nimport { uniqueId } from 'lodash';\nimport { FieldArray, Formik } from 'formik';\nimport { Form, Input, Button, Checkbox, Icon } from 'antd';\nimport contactsSchema from './schemas';\n\nexport default class Register extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      field: null,\n    };\n  }\n\n  render() {\n    const { field } = this.state;\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n          repeatPassword: '',\n          website: '',\n          age: '',\n          skills: [],\n          acceptTerms: false,\n        }}\n        validationSchema={contactsSchema}\n        onSubmit={(values, { setSubmitting }) => {\n          setSubmitting(false);\n        }}\n        validate={values => {\n          const errors = {};\n          if (!/^(?=^.{8,40}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z]).*$/.test(values.password)) {\n            errors.password =\n              'Password must contains 8-40 latin symbols, one on upper case, and one digit.';\n          }\n          if (values.password !== values.repeatPassword) {\n            errors.repeatPassword = 'Passwords do not match';\n          }\n          return errors;\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting,\n          /* and other goodies */\n        }) => (\n          <Form onSubmit={handleSubmit}>\n            <Form.Item label=\"Name\">\n              <Input\n                placeholder=\"Enter your name\"\n                name=\"name\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.name}\n                prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              />\n              {errors.name && touched.name && errors.name}\n            </Form.Item>\n            <Form.Item label=\"Password\">\n              <Input.Password\n                placeholder=\"Type password\"\n                name=\"password\"\n                type=\"password\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.password}\n                prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              />\n              {errors.password && touched.password && errors.password}\n            </Form.Item>\n            <Form.Item label=\"Repeat Password\">\n              <Input.Password\n                placeholder=\"Repeat password\"\n                name=\"repeatPassword\"\n                type=\"password\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.repeatPassword}\n                prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              />\n              {errors.repeatPassword && touched.repeatPassword && errors.repeatPassword}\n            </Form.Item>\n            <Form.Item label=\"Email\">\n              <Input\n                placeholder=\"Enter your email\"\n                name=\"email\"\n                type=\"email\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.email}\n                prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              />\n              {errors.email && touched.email && errors.email}\n            </Form.Item>\n            <Form.Item label=\"Website URL\">\n              <Input\n                placeholder=\"Your Website\"\n                name=\"website\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.website}\n                prefix={<Icon type=\"link\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              />\n              {errors.website && touched.website && errors.website}\n            </Form.Item>\n            <Form.Item label=\"Age\">\n              <Input\n                placeholder=\"Your Age\"\n                name=\"age\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.age}\n                prefix={<Icon type=\"idcard\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              />\n              {errors.age && touched.age && errors.age}\n            </Form.Item>\n            <FieldArray name=\"skills\">\n              {arrayHelpers => (\n                <Form.Item label=\"Skills\">\n                  {values.skills.length > 0 &&\n                    values.skills.map((skill, idx) => (\n                      <React.Fragment key={uniqueId()}>\n                        <Input\n                          placeholder=\"Add Your Skill\"\n                          name={`skills[${idx}]`}\n                          onChange={handleChange}\n                          value={skill}\n                          prefix={<Icon type=\"star\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                        />\n                        <Icon\n                          className=\"dynamic-delete-button\"\n                          type=\"minus-circle-o\"\n                          onClick={() => arrayHelpers.remove(idx)}\n                        />\n                      </React.Fragment>\n                    ))}\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => arrayHelpers.push('')}\n                    style={{ width: '60%' }}\n                  >\n                    <Icon type=\"plus\" /> Add new skill\n                  </Button>\n                </Form.Item>\n              )}\n            </FieldArray>\n            <Form.Item>\n              <Checkbox name=\"acceptTerms\" checked={values.acceptTerms}>\n                I have read the <a href=\"#agreement\">agreement {field}</a>\n              </Checkbox>\n              {errors.acceptTerms && touched.acceptTerms && errors.acceptTerms}\n            </Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" block disabled={isSubmitting}>\n              Register\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    );\n  }\n}\n","import React from 'react';\nimport { Layout, Row } from 'antd';\nimport WrappedRegister from './Register';\n\nconst { Content } = Layout;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Content>\n          <Row type=\"flex\" justify=\"center\">\n            <h1>New User Register</h1>\n          </Row>\n          <Row type=\"flex\" justify=\"center\">\n            <WrappedRegister />\n          </Row>\n        </Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'normalize.css';\nimport 'antd/dist/antd.css';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}