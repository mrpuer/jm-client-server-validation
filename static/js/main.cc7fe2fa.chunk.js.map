{"version":3,"sources":["schemas.js","Users.jsx","Register.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["yup","require","contactsSchema","object","shape","name","string","max","required","password","matches","email","website","url","age","number","min","skills","array","of","id","value","acceptTerms","bool","module","exports","Users","props","getUsers","axios","get","then","resp","setState","users","data","state","this","onClick","map","user","key","console","log","skill","React","Component","Register","initialValues","repeatPassword","validationSchema","onSubmit","values","setSubmitting","setFieldError","JSON","stringify","post","headers","Modal","success","content","catch","e","response","field","message","validate","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Item","label","placeholder","onBlur","onChange","prefix","type","style","color","Password","arrayHelpers","length","idx","className","remove","push","uniqueId","width","href","htmlType","block","disabled","Content","Layout","App","justify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc7fe2fa.chunk.js","sourcesContent":["const yup = require('yup');\n\nconst contactsSchema = yup.object().shape({\n  name: yup\n    .string()\n    .max(50, 'Too long Name')\n    .required('Name is required field.'),\n  password: yup\n    .string()\n    .required('Password is required field.')\n    .matches(\n      /^(?=^.{8,40}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z]).*$/,\n      'Password must contains 8-40 latin symbols, one on upper case, and one digit.'\n    ),\n  email: yup\n    .string()\n    .email('Invalid email address.')\n    .required('Email is required field.'),\n  website: yup.string().url(),\n  age: yup\n    .number()\n    .required('Age is required field.')\n    .min(18, '18 is min age')\n    .max(65, '65 is the max age'),\n  skills: yup.array().of(\n    yup.object().shape({\n      id: yup.string(),\n      value: yup.string(),\n    })\n  ),\n  acceptTerms: yup.bool(),\n});\n\nmodule.exports.contactsSchema = contactsSchema;\n","import React from 'react';\nimport { Button } from 'antd';\nimport axios from 'axios';\n\nexport default class Users extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [],\n    };\n  }\n\n  getUsers = () => {\n    axios.get('/users').then(resp => {\n      this.setState({ users: resp.data });\n    });\n  };\n\n  render() {\n    const { users } = this.state;\n    return (\n      <>\n        <div>\n          <Button onClick={this.getUsers}>Get</Button>\n        </div>\n        <div>\n          {users.map((user, id) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <ul key={id}>\n              {console.log(user)}\n              <li>{user.name}</li>\n              <li>{user.email}</li>\n              <li>\n                {user.skills.map(skill => (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <span key={skill.id}>{skill.value} </span>\n                ))}\n              </li>\n            </ul>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport { uniqueId } from 'lodash';\nimport { Field, FieldArray, Formik } from 'formik';\nimport { Form, Input, Button, Icon, Modal, Alert, Row } from 'antd';\nimport { contactsSchema } from './schemas';\nimport Users from './Users';\n\nconst Register = () => {\n  // noinspection HtmlUnknownAnchorTarget\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n        repeatPassword: '',\n        website: '',\n        age: '',\n        skills: [],\n        acceptTerms: true,\n      }}\n      validationSchema={contactsSchema}\n      onSubmit={(values, { setSubmitting, setFieldError }) => {\n        setSubmitting(false);\n        const data = JSON.stringify(values, [\n          'name',\n          'email',\n          'password',\n          'website',\n          'age',\n          'skills',\n          'id',\n          'value',\n        ]);\n        const axiosConfig = {\n          headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n          },\n        };\n        axios\n          .post('/sign-up', data, axiosConfig)\n          .then(resp => {\n            Modal.success({\n              content: resp.data,\n            });\n          })\n          .catch(e => {\n            setFieldError(e.response.data.field, e.response.data.message);\n          });\n        setSubmitting(true);\n      }}\n      validate={values => {\n        const errors = {};\n        if (values.password !== values.repeatPassword) {\n          errors.repeatPassword = 'Passwords do not match';\n        }\n        if (!values.acceptTerms) {\n          errors.acceptTerms = 'You need accept terms';\n        }\n        return errors;\n      }}\n    >\n      {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\n        <Form onSubmit={handleSubmit}>\n          <Form.Item label=\"Name\">\n            <Input\n              placeholder=\"Enter your name\"\n              name=\"name\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.name}\n              prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            />\n            {errors.name && touched.name && <Alert message={errors.name} type=\"error\" />}\n          </Form.Item>\n          <Form.Item label=\"Password\">\n            <Input.Password\n              placeholder=\"Type password\"\n              name=\"password\"\n              type=\"password\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.password}\n              prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            />\n            {errors.password && touched.password && (\n              <Alert message={errors.password} type=\"error\" />\n            )}\n          </Form.Item>\n          <Form.Item label=\"Repeat Password\">\n            <Input.Password\n              placeholder=\"Repeat password\"\n              name=\"repeatPassword\"\n              type=\"password\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.repeatPassword}\n              prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            />\n            {errors.repeatPassword && touched.repeatPassword && (\n              <Alert message={errors.repeatPassword} type=\"error\" />\n            )}\n          </Form.Item>\n          <Form.Item label=\"Email\">\n            <Input\n              placeholder=\"Enter your email\"\n              name=\"email\"\n              type=\"email\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.email}\n              prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            />\n            {errors.email && touched.email && <Alert message={errors.email} type=\"error\" />}\n          </Form.Item>\n          <Form.Item label=\"Website URL\">\n            <Input\n              placeholder=\"Your Website\"\n              name=\"website\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.website}\n              prefix={<Icon type=\"link\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            />\n            {errors.website && touched.website && <Alert message={errors.website} type=\"error\" />}\n          </Form.Item>\n          <Form.Item label=\"Age\">\n            <Input\n              placeholder=\"Your Age\"\n              name=\"age\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.age}\n              prefix={<Icon type=\"idcard\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            />\n            {errors.age && touched.age && <Alert message={errors.age} type=\"error\" />}\n          </Form.Item>\n          <FieldArray name=\"skills\">\n            {arrayHelpers => (\n              <Form.Item label=\"Skills\">\n                {values.skills.length > 0 &&\n                  values.skills.map((skill, idx) => (\n                    <Row key={skill.id}>\n                      <Input\n                        placeholder=\"Add Your Skill\"\n                        name={`skills[${idx}].value`}\n                        onChange={handleChange}\n                        value={skill.value}\n                        prefix={<Icon type=\"star\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                      />\n                      <Icon\n                        className=\"dynamic-delete-button\"\n                        type=\"minus-circle-o\"\n                        onClick={() => arrayHelpers.remove(idx)}\n                      />\n                    </Row>\n                  ))}\n                <Button\n                  type=\"dashed\"\n                  onClick={() => arrayHelpers.push({ id: uniqueId(), value: '' })}\n                  style={{ width: '60%' }}\n                >\n                  <Icon type=\"plus\" /> Add new skill\n                </Button>\n              </Form.Item>\n            )}\n          </FieldArray>\n          <Form.Item>\n            <Field type=\"checkbox\" name=\"acceptTerms\" /> I have read the{' '}\n            <a href=\"#agreement\">agreement</a>\n            {errors.acceptTerms && touched.acceptTerms && (\n              <Alert message={errors.acceptTerms} type=\"error\" />\n            )}\n          </Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" block disabled={isSubmitting}>\n            Register\n          </Button>\n          <Users />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default Register;\n","import React from 'react';\nimport { Layout, Row } from 'antd';\nimport Register from './Register';\n\nconst { Content } = Layout;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Content>\n          <Row type=\"flex\" justify=\"center\">\n            <h1>New User Register</h1>\n          </Row>\n          <Row type=\"flex\" justify=\"center\">\n            <Register />\n          </Row>\n        </Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'normalize.css';\nimport 'antd/dist/antd.css';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}