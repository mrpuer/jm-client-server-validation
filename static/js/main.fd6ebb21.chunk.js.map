{"version":3,"sources":["schemas.js","Users.jsx","CustomInput.jsx","Register.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["yup","require","contactsSchema","object","shape","name","string","max","required","password","matches","repeatPassword","oneOf","ref","email","website","url","age","number","min","skills","array","of","id","value","acceptTerms","bool","module","exports","Users","props","getUsers","axios","get","then","resp","setState","users","data","state","this","onClick","map","user","key","skill","React","Component","CustomInput","formData","itemData","handleBlur","handleChange","values","errors","touched","placeholder","icon","label","type","Item","onBlur","onChange","prefix","style","color","message","Register","initialValues","validationSchema","onSubmit","setSubmitting","setFieldError","JSON","stringify","post","headers","Modal","success","content","catch","e","response","field","handleSubmit","isSubmitting","arrayHelpers","length","idx","className","remove","push","uniqueId","width","href","htmlType","block","disabled","Content","Layout","App","justify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd6ebb21.chunk.js","sourcesContent":["const yup = require('yup');\n\nconst contactsSchema = yup.object().shape({\n  name: yup\n    .string()\n    .max(50, 'Too long Name')\n    .required('Name is required field.'),\n  password: yup\n    .string()\n    .required('Password is required field.')\n    .matches(\n      /^(?=^.{8,40}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z]).*$/,\n      'Password must contains 8-40 latin symbols, one on upper case, and one digit.'\n    ),\n  repeatPassword: yup.string().oneOf([yup.ref('password'), null, ''], 'Passwords must match'),\n  email: yup\n    .string()\n    .email('Invalid email address.')\n    .required('Email is required field.'),\n  website: yup.string().url(),\n  age: yup\n    .number()\n    .required('Age is required field.')\n    .min(18, '18 is min age')\n    .max(65, '65 is the max age'),\n  skills: yup.array().of(\n    yup.object().shape({\n      id: yup.string(),\n      value: yup.string(),\n    })\n  ),\n  acceptTerms: yup.bool(),\n});\n\nmodule.exports.contactsSchema = contactsSchema;\n","import React from 'react';\nimport { Button } from 'antd';\nimport axios from 'axios';\n\nexport default class Users extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [],\n    };\n  }\n\n  getUsers = () => {\n    axios.get('/users').then(resp => {\n      this.setState({ users: resp.data });\n    });\n  };\n\n  render() {\n    const { users } = this.state;\n    return (\n      <>\n        <div>\n          <Button onClick={this.getUsers}>Get</Button>\n        </div>\n        <div>\n          {users.map((user, id) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <ul key={id}>\n              <li>{user.name}</li>\n              <li>{user.email}</li>\n              <li>\n                {user.skills.map(skill => (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <span key={skill.id}>{skill.value} </span>\n                ))}\n              </li>\n            </ul>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Form, Icon, Input } from 'antd';\n\nconst CustomInput = ({ formData, itemData }) => {\n  const { handleBlur, handleChange, values, errors, touched } = formData;\n  const { placeholder, name, icon, label, type } = itemData;\n  return (\n    <Form.Item label={label}>\n      <Input\n        placeholder={placeholder}\n        name={name}\n        onBlur={handleBlur}\n        onChange={handleChange}\n        value={values[name]}\n        prefix={<Icon type={icon} style={{ color: 'rgba(0,0,0,.25)' }} />}\n        type={type}\n      />\n      {errors[name] && touched[name] && <Alert message={errors[name]} type=\"error\" />}\n    </Form.Item>\n  );\n};\n\nCustomInput.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  formData: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  itemData: PropTypes.object.isRequired,\n};\n\nexport default CustomInput;\n","import React from 'react';\nimport axios from 'axios';\nimport { uniqueId } from 'lodash';\nimport { Field, FieldArray, Formik } from 'formik';\nimport { Form, Input, Button, Icon, Modal, Alert, Row } from 'antd';\nimport { contactsSchema } from './schemas';\nimport Users from './Users';\nimport CustomInput from './CustomInput';\n\nconst Register = () => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n        repeatPassword: '',\n        website: '',\n        age: '',\n        skills: [],\n        acceptTerms: true,\n      }}\n      validationSchema={contactsSchema}\n      onSubmit={(values, { setSubmitting, setFieldError }) => {\n        setSubmitting(false);\n        const data = JSON.stringify(values, [\n          'name',\n          'email',\n          'password',\n          'website',\n          'age',\n          'skills',\n          'id',\n          'value',\n        ]);\n        const axiosConfig = {\n          headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n          },\n        };\n        axios\n          .post('/sign-up', data, axiosConfig)\n          .then(resp => {\n            Modal.success({\n              content: resp.data,\n            });\n          })\n          .catch(e => {\n            setFieldError(e.response.data.field, e.response.data.message);\n          });\n        setSubmitting(true);\n      }}\n    >\n      {formData => {\n        const { values, errors, touched, handleChange, handleSubmit, isSubmitting } = formData;\n        return (\n          <Form onSubmit={handleSubmit}>\n            <CustomInput\n              formData={formData}\n              itemData={{\n                placeholder: 'Enter your name',\n                name: 'name',\n                icon: 'user',\n                label: 'Name',\n                type: 'text',\n              }}\n            />\n            <CustomInput\n              formData={formData}\n              itemData={{\n                placeholder: 'Type password',\n                name: 'password',\n                icon: 'lock',\n                label: 'Password',\n                type: 'password',\n              }}\n            />\n            <CustomInput\n              formData={formData}\n              itemData={{\n                placeholder: 'Repeat password',\n                name: 'repeatPassword',\n                icon: 'lock',\n                label: 'Repeat Password',\n                type: 'password',\n              }}\n            />\n            <CustomInput\n              formData={formData}\n              itemData={{\n                placeholder: 'Enter your email',\n                name: 'email',\n                icon: 'mail',\n                label: 'Email',\n                type: 'email',\n              }}\n            />\n            <CustomInput\n              formData={formData}\n              itemData={{\n                placeholder: 'Your Website',\n                name: 'website',\n                icon: 'link',\n                label: 'Website URL',\n                type: 'text',\n              }}\n            />\n            <CustomInput\n              formData={formData}\n              itemData={{\n                placeholder: 'Your Age',\n                name: 'age',\n                icon: 'idcard',\n                label: 'Age',\n                type: 'text',\n              }}\n            />\n            <FieldArray name=\"skills\">\n              {arrayHelpers => (\n                <Form.Item label=\"Skills\">\n                  {values.skills.length > 0 &&\n                    values.skills.map((skill, idx) => (\n                      <Row key={skill.id}>\n                        <Input\n                          placeholder=\"Add Your Skill\"\n                          name={`skills[${idx}].value`}\n                          onChange={handleChange}\n                          value={skill.value}\n                          prefix={<Icon type=\"star\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                        />\n                        <Icon\n                          className=\"dynamic-delete-button\"\n                          type=\"minus-circle-o\"\n                          onClick={() => arrayHelpers.remove(idx)}\n                        />\n                      </Row>\n                    ))}\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => arrayHelpers.push({ id: uniqueId(), value: '' })}\n                    style={{ width: '60%' }}\n                  >\n                    <Icon type=\"plus\" /> Add new skill\n                  </Button>\n                </Form.Item>\n              )}\n            </FieldArray>\n            <Form.Item>\n              <Field type=\"checkbox\" name=\"acceptTerms\" /> I have read the{' '}\n              <a href=\"#agreement\">agreement</a>\n              {errors.acceptTerms && touched.acceptTerms && (\n                <Alert message={errors.acceptTerms} type=\"error\" />\n              )}\n            </Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" block disabled={isSubmitting}>\n              Register\n            </Button>\n            <Users />\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default Register;\n","import React from 'react';\nimport { Layout, Row } from 'antd';\nimport Register from './Register';\n\nconst { Content } = Layout;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Content>\n          <Row type=\"flex\" justify=\"center\">\n            <h1>New User Register</h1>\n          </Row>\n          <Row type=\"flex\" justify=\"center\">\n            <Register />\n          </Row>\n        </Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'normalize.css';\nimport 'antd/dist/antd.css';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}